export { VERSION } from "./VERSION";
export { query } from "./exec/query";
export { mutate } from "./exec/mutate";
export { verifyUserSignatures } from "./exec/verify";
export { serialize } from "./serialize";
export { transaction as tx } from "./transaction";
export { events } from "./events";
export { pluginRegistry } from "./current-user/exec-service/plugins";
export function authenticate(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function unauthenticate(): void;
export function reauthenticate(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function signUp(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export function logIn(opts?: {}): Promise<import("@onflow/typedefs").CurrentUser>;
export const authz: (account: any) => Promise<any>;
export const t: any;
export { getChainId } from "./utils";
export { config } from "@onflow/config";
export type ArgsFn = (arg: ArgFn, t: object) => any[];
export type ArgFn = (value: any, type: any) => any;
import { currentUser } from "./current-user";
import { discovery } from "./discovery";
import * as WalletUtils from "./wallet-utils";
import * as AppUtils from "./app-utils";
import * as InteractionTemplateUtils from "./interaction-template-utils";
export { currentUser, discovery, WalletUtils, AppUtils, InteractionTemplateUtils };
export { TestUtils, send, decode, account, block, isOk, isBad, why, pipe, build, createSignableVoucher, voucherIntercept, voucherToTxId, transaction, script, ping, atBlockHeight, atBlockId, getAccount, getEvents, getEventsAtBlockHeightRange, getEventsAtBlockIds, getBlock, getBlockHeader, getCollection, getTransactionStatus, getTransaction, getNetworkParameters, authorizations, authorization, args, arg, proposer, payer, limit, ref, params, param, validator, invariant } from "@onflow/sdk";
export { withPrefix, sansPrefix, display } from "@onflow/util-address";
